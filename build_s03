#!/bin/bash

set -e

# options
version=0
upgrade_only=0
check=0
nginx=0

# output usage message
usage() {
  echo ""
  echo "== build_s03 =="
  echo ""
  echo "Set up new Linux Instance (Ubuntu 24.04)"
  echo "Intall ruby,  mysql , nginx (optionally) and nodejs."
  echo "Set up server to be suitable for Rails projects"
  echo ""
  echo usage: `basename $0` [-uv]
  cat <<EOF
  -c                Check Only - do not execute commands
  -n                Install nginx
  -u                Exit After Upgrade Step
  -v                Display Ubuntu Version
EOF
}



while getopts cnuv\? x ; do
  case $x in
    c)  check=1;;
    n)  nginx=1;;
    u)  upgrade_only=1;;
    v)  version=1;;
    \?) usage
        exit 1;;
  esac
done
shift $((OPTIND-1))

if [[ $version = 1 ]]; then
  # Get O/S info
  echo "Unbutu versions information:"
  echo ""
  cat /etc/os-release
  echo ""
fi


printf "\n\nExecuting build_s02 script to initialize server\n"

# -----------------------------------------------------------------------------------------
step=1
# -----------------------------------------------------------------------------------------
printf "\n\n  %i)   Make sure our packages are up to date =============\n" $step
if [[ $check = 1 ]]; then
  printf "\n    will execute ...  apt update"
  printf "\n    will execute ...  apt upgrade"
else
  apt update
  apt upgrade
fi


if [[ $upgrade_only = 1 ]]; then
  printf "\n\n  Update/Update Only ... exit after step %i =============\n" $step
  exit 0
fi


# -----------------------------------------------------------------------------------------
let step=$step+1
# -----------------------------------------------------------------------------------------
printf "\n\n  %i)   install some pre-reqs  ==============================\n" $step
if [[ $check = 1 ]]; then
  printf "\n    will execute ...  apt install git curl libssl-dev libreadline-dev zlib1g-dev autoconf bison build-essential libyaml-dev libreadline-dev libncurses5-dev libffi-dev libgdbm-dev"
else
  apt install git curl libssl-dev libreadline-dev zlib1g-dev autoconf bison build-essential libyaml-dev libreadline-dev libncurses5-dev libffi-dev libgdbm-dev
fi



# -----------------------------------------------------------------------------------------
let step=$step+1
# -----------------------------------------------------------------------------------------
printf "\n\n  %i)   ruby =================================================\n" $step
if [[ $check = 1 ]]; then
  printf "\n    will execute ...  apt install ruby-full ruby-dev ruby-bundler"
else
  apt install ruby-full ruby-dev ruby-bundler
fi




if [[ $nginx = 1 ]]; then
  # -----------------------------------------------------------------------------------------
  let step=$step+1
  # -----------------------------------------------------------------------------------------
  printf "\n\n  %i)   nginx ===============================================\n" $step
  if [[ $check = 1 ]]; then
    printf "\n    will execute ...  sudo apt install nginx"
  else
    apt install nginx
  fi
fi


# -----------------------------------------------------------------------------------------
let step=$step+1
# -----------------------------------------------------------------------------------------
printf "\n\n  %i)   mysql ================================================\n" $step

# check if mysql is installed
if [ -f /etc/init.d/mysql* ]; then
  printf "\n         mysql exists, no action\n"
else
  # Need to install mysql
  printf "\n         ... installing mysql\n"

  if [[ $check = 1 ]]; then
    printf "\n    will execute ...  apt install mysql-server mysql-client libmysqlclient-dev"
    printf "\n    will execute ...  mysql_secure_installation"
  else
    apt install mysql-server mysql-client libmysqlclient-dev
    mysql_secure_installation
  fi
fi

# -----------------------------------------------------------------------------------------
let step=$step+1
# -----------------------------------------------------------------------------------------
printf "\n\n  %i)   nodejs ================================================\n", $step

NODE_MAJOR=20

# Rails wants a newer version of node that we get with the Debian distro.
  if [[ $check = 1 ]]; then
    printf "\n    will execute ...  apt-get install -y ca-certificates curl gnupg"
    printf "\n    will execute ...  mkdir -p /etc/apt/keyrings"
    printf "\n    will execute ...  curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg"
    printf "\n    will execute ...  echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | tee /etc/apt/sources.list.d/nodesource.list"
    printf "\n    will execute ...  apt-get update"
    printf "\n    will execute ...  apt-get install nodejs -y -q"
    printf "\n    will execute ...  corepack enable"
  else
    apt-get install -y ca-certificates curl gnupg
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
    apt-get update
    apt-get install nodejs -y -q
    corepack enable
  fi


# -----------------------------------------------------------------------------------------
if [[ $check = 0 ]]; then
  ruby_version=`ruby -v`
  mysql_version=`mysql -V`
  if [[ $nginx = 1 ]]; then  
    nginx_version=`nginx -v`
  fi
  nodejs_version=`nodejs -v`
  yarn_version=`yarn -v`

  echo "--------------------------------------------------------------------------------------"
  echo "--   Ruby Version: $ruby_version"
  echo "--  MySQL Version: $mysql_version"
  echo "--  nginx Version: $nginx_version"
  echo "-- nodejs Version: $nodejs_version"
  echo "--   yarn Version: $yarn_version"
  echo "--------------------------------------------------------------------------------------"
fi

printf "\n\n------------------------------"
printf "\n--       Finished!          --"
printf "\n------------------------------\n\n"

